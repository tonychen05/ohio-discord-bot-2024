"""
Imports the data from the CSV file generated by Qualtrics.
Any entires already in the database are ignored during the import.
"""
import sys
import csv
import core.records as records
import time

# Be sure to check the Qualtrics forms for what these values should be.
JUDGE_ROLE_NUM = '1'
"""A string that represents the judge role in the volunteer form's CSV file."""
MENTOR_ROLE_NUM = '2'
"""A string that represents the mentor role in the volunteer form's CSV file."""

DATA_ATTR = {
    'First Name':'first_name',
    'Last Name': 'last_name',
    'Q24': 'university',
    'Q25': 'class_team',
    'Major': 'major',
    'Grad Year': 'grad_year',
    'Company': 'company',
    'Job Title ': 'job_title'
}
"""
A dictionary of attribute names that should be searched for and included as user data,
<b>regardless of which form is being imported</b>.
</br>
The keys of this dictionary are the attribute names used in the CSV file.
</br>
The values of this dictionary are the attribute names used in the user data database table.
"""

# Variable to keep track of stats for report at the end.
num_duplicates = 0
num_error = 0
num_unfinished = 0
num_entries = 0
start_time = time.time()

# Print a startup message.
print(f'Started importing {sys.argv[1]}, please wait...')

# Check that the correct number of command line arguments were given.
try:
    assert len(sys.argv) == 2
except AssertionError:
    print('USAGE: import_table.py [csv_filename]')
    print('csv_filename: the name of the CSV file to import.')
    sys.exit(2)

with open(sys.argv[1], 'r', encoding='utf-8') as csv_file:
    # Try to open the provided file name.
    try:
        assert sys.argv[1].lower().endswith('.csv')
        reader = csv.DictReader(csv_file, delimiter=',')
    except AssertionError:
        print('ERROR: Not a CSV file. Check format and resubmit.')
        sys.exit(2)

    # Verify that the file has all the attributes we need.
    try:
        attributes = set(reader.fieldnames)
        attributes.remove('Progress')
        attributes.remove('Email')
    except TypeError:
        print('ERROR: CSV file not formatted correctly. Check file contents and resubmit.')
        sys.exit(2)
    except KeyError:
        print('ERROR: CSV file missing required attributes. Check file contents and resubmit.')
        sys.exit(2)

    # Check if we are importing the participant or volunteer form.
    is_participant = False
    try:
        attributes.remove('Roles')
    except KeyError:
        is_participant = True

    # For each entry in the CSV file...
    for entry in reader:
        num_entries = num_entries + 1

        # Check that the entry is for a completed response.
        if entry['Progress'] != '100':
            num_unfinished = num_unfinished + 1
            continue

        # Check for and store the entry's email.
        if entry['Email'] == '':
            num_error = num_error + 1
            continue
        email = entry['Email'].replace(' ', '')

        # Check for and store the entry's roles.
        roles = []
        if is_participant:
            roles.append('participant')
        else:
            # If the roles attribute exists but is blank, skip this entry.
            if entry['Roles'] == '':
                num_error = num_error + 1
                continue
            # Add appropriate roles for the volunteer form.
            if JUDGE_ROLE_NUM in entry['Roles']:
                roles.append('judge')
            if MENTOR_ROLE_NUM in entry['Roles']:
                roles.append('mentor')

        # Check for and store all user data.
        data = {'email': email}
        for attribute in DATA_ATTR.keys():
            try:
                data[DATA_ATTR[attribute]] = entry[attribute]
            except KeyError:
                data[DATA_ATTR[attribute]] = None

        # Add this entry's data to the database if it is not a duplicate.
        if records.registered_user_exists(email) and records.user_data_exists(email):
            # Get the existing version of this entry's data.
            old_data = records.get_user_data(email)

            # Check if the roles are the same.
            is_duplicate = set(records.get_roles(email)) == set(roles)

            # Check all data attributes.
            for attribute in data:
                try:
                    is_duplicate = is_duplicate and old_data[attribute] == data[attribute]
                except KeyError:
                    # If a key does not exist in old_data, then this entry is not a duplicate.
                    is_duplicate = False
                    break

            # If this entry is not a duplicate, add it.
            if not is_duplicate:
                records.add_registered_user(email, roles, data)
            else:
                num_duplicates = num_duplicates + 1
        else:
            # If this entry is not in the database, add it.
            records.add_registered_user(email, roles, data)

# There are essentially three header rows in the CSV file generated by Qualtrics.
# One header row is the actual header row, and the other two rows are treated as entries
# by the CSV reader. As such, subtract two from the relevant totals.
num_entries = num_entries - 2
num_unfinished = num_unfinished - 2

# Output statistics to help with any troubleshooting that may come up.
print(f'Finished importing {sys.argv[1]}')
print(f'Processing time: {time.time() - start_time:.3f} seconds')
print(f'Total number of entries processed: {num_entries}')
print(f'-----------------------------------------')
print(f'Number of entries added to database:', end=' ')
print(f'{num_entries - num_duplicates - num_error - num_unfinished} out of {num_entries}')
print(f'Number of duplicate entries: {num_duplicates} out of {num_entries}')
print(f'Number of entries with incomplete information: {num_error} out of {num_entries}')
print(f'Number of unfinished entries: {num_unfinished} out of {num_entries}')
